services:
  api: &main_app
    build:
      context: .
      dockerfile: ./Dockerfile
    image: rest_angular:${REST_ANGULAR_VERSION:-latest}
    restart: no
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      HOST: rest_angular.local
      DB_HOST: rest_angular-db
      DB_PORT: 5432
      DB_USER: ${DB_USER:-rest_angular}
      DB_PASSWORD: ${DB_PASSWORD:-rest_angular}
      DB_NAME: ${DB_NAME:-rest_angular}
      REDIS_HOST: rest_angular-redis
      KAFKA_BOOTSTRAP_SERVERS: "rest_angular-kafka:9092"

  db:
    image: postgres:17-alpine
    hostname: rest_angular-db
    restart: no
    environment:
      POSTGRES_USER: ${DB_USER:-rest_angular}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-rest_angular}
      POSTGRES_DB: ${DB_NAME:-rest_angular}
    volumes:
      - rest_angular-db-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U rest_angular
      interval: 2s
      timeout: 3s
      retries: 40

  redis:
    image: redis:alpine
    hostname: "rest_angular-redis"
    restart: no
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 50

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: "rest_angular-kafka"
    restart: no
    user: "1000:1000"
    environment:
      # KRaft mode configuration (Kafka without Zookeeper)
      KAFKA_NODE_ID: "1"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@rest_angular-kafka:9093"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"

      # Listeners configuration
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://rest_angular-kafka:9092,EXTERNAL://rest_angular-kafka:9094"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"

      # Cluster and topic configuration - UUID format required
      CLUSTER_ID: "5L6g3nShT-eMCtK--X86sw"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"

      # Log directories
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"

      # JVM settings for small containers
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms512m"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list
      interval: 5s
      timeout: 10s
      retries: 30

volumes:
  rest_angular-db-data:
    name: rest_angular-db-data
  kafka-data:
    name: kafka-data
